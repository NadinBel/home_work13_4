from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
import emoji


api = ''
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

key_board = ReplyKeyboardMarkup(resize_keyboard=True)
btn_1 = KeyboardButton(text=emoji.emojize('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å :fork_and_knife_with_plate:'))
btn_2 = KeyboardButton(text=emoji.emojize('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è :eye:'))
key_board.add(btn_1, btn_2)


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup=key_board)


class UserState(StatesGroup):
    age = State()
    growth = State()
    weigth = State()

@dp.message_handler(text=[emoji.emojize('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å :fork_and_knife_with_plate:')])
async def set_age(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç üéâ')
    await UserState.age.set()
@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç üìè')
    await UserState.growth.set()
@dp.message_handler(state=UserState.growth)
async def set_weigth(message, state):
    await state.update_data(growth=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å ‚öñÔ∏è')
    await UserState.weigth.set()
@dp.message_handler(state=UserState.weigth)
async def send_calories(message, state):
    await state.update_data(weigth=message.text)
    data = await state.get_data()
    calories_res = ((10 * int(data['weigth'])) + (6.25 * int(data['growth'])) - (5 * int(data['age'])) + 5)
    await message.answer(f'{calories_res} –∫–∞–ª–æ—Ä–∏–π üëç')
    await state.finish()

@dp.message_handler()
async def all_massages(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')


if __name__=='__main__':
    executor.start_polling(dp, skip_updates=True)
